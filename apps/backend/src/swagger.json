{
  "openapi": "3.0.0",
  "info": {
    "title": "Result System REST API",
    "version": "1.0",
    "description": "This is the <b> Result System Backend</b> server."
  },
  "tags": [
    { "name": "Auth", "description": "All routes of the authentication." },
    { "name": "Admin", "description": "All routes of the Admin." }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Success": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean", "default": true },
          "message": { "type": "string" },
          "detail": { "type": "string" },
          "timestamp": { "type": "string" }
        },
        "required": ["success", "timestamp"]
      },
      "Error": {
        "type": "object",
        "required": ["success", "code", "message", "timestamp"],
        "properties": {
          "success": { "type": "boolean", "default": false },
          "code": {
            "type": "string",
            "enum": [
              "OK",
              "CREATED",
              "MOVED_PERMANENTLY",
              "BAD_REQUEST",
              "UNAUTHORIZED",
              "PAYMENT_REQUIRED",
              "FORBIDDEN",
              "NOT_FOUND",
              "CONFLICT",
              "UNSUPPORTED_MEDIA_TYPE",
              "BAD_USER_INPUT",
              "TOO_MANY_REQUESTS",
              "REQUEST_HEADER_FIELDS_TOO_LARGE",
              "INTERNAL_SERVER_ERROR"
            ]
          },
          "message": { "type": "string" },
          "detail": { "type": "string" },
          "paths": { "type": "array" },
          "timestamp": { "type": "string" }
        }
      },
      "OffsetPageInfo": {
        "type": "object",
        "required": ["hasNext", "nextPage", "previousPage", "totalPages"],
        "properties": {
          "hasNext": { "type": "boolean" },
          "nextPage": { "type": "integer" },
          "previousPage": { "type": "integer" },
          "totalPages": { "type": "integer" }
        }
      },
      "Avatar": {
        "type": "object",
        "nullable": true,
        "required": ["url", "width", "height"],
        "properties": {
          "url": { "type": "string" },
          "width": { "type": "number" },
          "height": { "type": "number" }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "id",
          "username",
          "firstName",
          "lastName",
          "role",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": { "type": "string" },
          "username": { "type": "string" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "role": {
            "type": "string",
            "enum": ["STUDENT", "TEACHER", "ADMIN"]
          },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "avatar": {
            "$ref": "#/components/schemas/Avatar"
          }
        }
      },
      "Class": {
        "type": "object",
        "required": ["id", "name", "createdAt", "updatedAt"],
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" }
        }
      }
    },
    "responses": {
      "BAD_REQUEST": {
        "description": "Bad Request - Invalid request payload",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "default": "BAD_REQUEST"
                    }
                  },
                  "required": ["code"]
                }
              ]
            }
          }
        }
      },
      "CONFLICT": {
        "description": "CONFLICT",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "default": "CONFLICT"
                    }
                  },
                  "required": ["code"]
                }
              ]
            }
          }
        }
      },
      "FORBIDDEN": {
        "description": "FORBIDDEN",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "default": "FORBIDDEN"
                    }
                  },
                  "required": ["code"]
                }
              ]
            }
          }
        }
      },
      "NOT_FOUND": {
        "description": "NOT FOUND",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "default": "NOT_FOUND"
                    }
                  },
                  "required": ["code"]
                }
              ]
            }
          }
        }
      },
      "UNAUTHORIZED": {
        "description": "Unauthorized - User is not logged in",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "default": "UNAUTHORIZED"
                    }
                  },
                  "required": ["code"]
                }
              ]
            }
          }
        }
      },
      "TOO_MANY_REQUESTS": {
        "description": "TOO MANY REQUESTS",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "default": "TOO_MANY_REQUESTS"
                    }
                  },
                  "required": ["code"]
                }
              ]
            }
          }
        }
      },
      "BAD_USER_INPUT": {
        "description": "Unprocessable Entity - Request cannot be processed due to semantic errors",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "default": "BAD_USER_INPUT"
                    }
                  },
                  "required": ["code"]
                }
              ]
            }
          }
        }
      },
      "INTERNAL_SERVER_ERROR": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "default": "INTERNAL_SERVER_ERROR"
                    }
                  },
                  "required": ["code"]
                }
              ]
            }
          }
        }
      }
    }
  },
  "paths": {
    "/api/v1/auth/register": {
      "post": {
        "summary": "Admin can register user",
        "description": "Admin can register \"STUDENT\" or \"TEACHER\" account.",
        "tags": ["Auth"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "description": "The first name of the user"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "The last name of the user"
                  },
                  "role": {
                    "description": "The role of the user",
                    "type": "string",
                    "enum": ["STUDENT", "TEACHER"]
                  },
                  "password": {
                    "description": "The password of the user",
                    "type": "string"
                  },
                  "confirmPassword": {
                    "description": "The confirm password of the user",
                    "type": "string"
                  },
                  "avatar": {
                    "type": "string",
                    "format": "binary",
                    "description": "The profile picture of the user"
                  }
                },
                "required": [
                  "firstName",
                  "lastName",
                  "role",
                  "password",
                  "confirmPassword"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created user.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Success"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "string"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "summary": "User can login",
        "description": "User can login.",
        "tags": ["Auth"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The username of the user"
                  },

                  "password": {
                    "description": "The password of the user",
                    "type": "string"
                  }
                },
                "required": ["username", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in user.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Success"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "accessToken": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "429": {
            "$ref": "#/components/responses/TOO_MANY_REQUESTS"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/api/v1/auth/token": {
      "get": {
        "summary": "Generate access token",
        "description": "Users can generate an access token by passing a JSON Web Token (JWT) through a cookie.",
        "tags": ["Auth"],
        "responses": {
          "201": {
            "description": "Successfully generated access token.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Success"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "accessToken": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "summary": "Logout the user",
        "description": "This endpoint is used to log out a user and invalidate their session. After successful logout, the user will no longer have access to protected resources.",
        "tags": ["Auth"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "204": {
            "description": "Successfully logout.",
            "content": {}
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/api/v1/admin/users": {
      "get": {
        "summary": "Get all the users",
        "description": "Retrieves a list of all users registered in the system",
        "tags": ["Admin"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page number of the result set to retrieve. Use this parameter to skip a certain number of items before starting to collect the result set. For example, if the limit is set to 10 and page is set to 2, the API will retrieve items 11 to 20."
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The maximum number of items to return per page. Use this parameter to control the size of the result set. For example, if the limit is set to 10, the API will return a maximum of 10 users per page."
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Success"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/User"
                              }
                            },
                            "total": {
                              "type": "integer"
                            },
                            "pageInfo": {
                              "$ref": "#/components/schemas/OffsetPageInfo"
                            }
                          }
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/api/v1/admin/users/{id}": {
      "get": {
        "summary": "Get a user",
        "description": "Gets a specific user based on the provided ID.",
        "tags": ["Admin"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the user to get."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Success"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/User"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      },
      "patch": {
        "summary": "Update the user",
        "description": "Updates a specific user based on the provided ID.",
        "tags": ["Admin"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the user to get."
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "description": "The first name of the user"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "The last name of the user"
                  },
                  "password": {
                    "description": "The password of the user",
                    "type": "string"
                  },
                  "confirmPassword": {
                    "description": "The confirm password of the user",
                    "type": "string"
                  },
                  "avatar": {
                    "type": "string",
                    "format": "binary",
                    "description": "The profile picture of the user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Success"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/User"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      },
      "delete": {
        "summary": "Delete a user",
        "description": "Deletes a specific user based on the provided ID.",
        "tags": ["Admin"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the user to delete."
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully",
            "content": {}
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/api/v1/admin/classes": {
      "get": {
        "summary": "Get all the classes",
        "description": "Retrieves a list of all classes",
        "tags": ["Admin"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page number of the result set to retrieve. Use this parameter to skip a certain number of items before starting to collect the result set. For example, if the limit is set to 10 and page is set to 2, the API will retrieve items 11 to 20."
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The maximum number of items to return per page. Use this parameter to control the size of the result set. For example, if the limit is set to 10, the API will return a maximum of 10 users per page."
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Success"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Class"
                              }
                            },
                            "total": {
                              "type": "integer"
                            },
                            "pageInfo": {
                              "$ref": "#/components/schemas/OffsetPageInfo"
                            }
                          }
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      },
      "post": {
        "summary": "Admin can create classes",
        "tags": ["Admin"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the class"
                  }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a class.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Success"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "string"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/api/v1/admin/classes/{id}": {
      "get": {
        "summary": "Get a class",
        "description": "Gets a specific class based on the provided ID.",
        "tags": ["Admin"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the class to get."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Success"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/Class"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      },
      "delete": {
        "summary": "Delete a class",
        "description": "Deletes a specific class based on the provided ID.",
        "tags": ["Admin"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the class to delete."
          }
        ],
        "responses": {
          "204": {
            "description": "Class deleted successfully",
            "content": {}
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    }
  }
}
